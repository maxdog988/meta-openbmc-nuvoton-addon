diff --git a/app/channel.cpp b/app/channel.cpp
index 3c011fd..8362462 100644
--- a/app/channel.cpp
+++ b/app/channel.cpp
@@ -12,7 +12,6 @@
 #include <phosphor-logging/elog-errors.hpp>
 #include "xyz/openbmc_project/Common/error.hpp"
 
-
 using namespace phosphor::logging;
 using namespace sdbusplus::xyz::openbmc_project::Common::Error;
 
@@ -88,8 +87,10 @@ ipmi_ret_t ipmi_get_channel_access(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
 // IPMI Table 6-2
 #define IPMI_CHANNEL_TYPE_IPMB 1
 // IPMI Table 6-3
+#define IPMI_CHANNEL_MEDIUM_TYPE_IPMB 1
 #define IPMI_CHANNEL_MEDIUM_TYPE_OTHER 6
 
+#define CHANNEL_IPMB 2
 ipmi_ret_t ipmi_app_channel_info(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
                              ipmi_request_t request, ipmi_response_t response,
                              ipmi_data_len_t data_len, ipmi_context_t context)
@@ -107,7 +108,13 @@ ipmi_ret_t ipmi_app_channel_info(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
     // The supported channels numbers are those which are configured.
     // Channel Number E is used as way to identify the current channel
     // that the command is being is received from.
-    if (channel != 0xe && ethdevice.empty()) {
+    if (channel == CHANNEL_IPMB) {
+        resp[0] = CHANNEL_IPMB;
+        resp[1] = IPMI_CHANNEL_MEDIUM_TYPE_IPMB;
+        resp[2] = 2; // LAN + IPMB channel
+        *data_len = sizeof(resp);
+        memcpy(response, resp, *data_len);
+    } else if (channel != 0xe && ethdevice.empty()) {
         rc = IPMI_CC_PARM_OUT_OF_RANGE;
         *data_len = 0;
     } else {
@@ -255,3 +262,4 @@ ipmi_ret_t getChannelCipherSuites(ipmi_netfn_t netfn,
 
     return IPMI_CC_OK;
 }
+
diff --git a/host-cmd-manager.cpp b/host-cmd-manager.cpp
index 4316451..ad11bb9 100644
--- a/host-cmd-manager.cpp
+++ b/host-cmd-manager.cpp
@@ -105,12 +105,18 @@ void Manager::clearQueue()
         // `false` indicating Failure
         std::get<CallBack>(command)(ipmiCmdData, false);
     }
+    while(!this->ReceiveMessageQueue.empty())
+    {
+        /* discard the messages in queue */
+        this->ReceiveMessageQueue.pop();
+
+    }
 }
 
 // Called for alerting the host
 void Manager::checkQueueAndAlertHost()
 {
-    if (this->workQueue.size() >= 1)
+    if (this->workQueue.size() >= 1 || this->ReceiveMessageQueue.size() >= 1)
     {
         log<level::DEBUG>("Asserting SMS Attention");
 
@@ -190,6 +196,61 @@ void Manager::clearQueueOnPowerOn(sdbusplus::message::message& msg)
     }
 }
 
+void Manager::AddtoRMQ(IpmbMsg msg)
+{
+    log<level::DEBUG>("push data to RMQ");
+
+    this->ReceiveMessageQueue.emplace(msg);
+
+    if (this->ReceiveMessageQueue.size() == 1)
+    {
+        this->checkQueueAndAlertHost();
+    }
+
+    return;
+}
+
+IpmbMsg Manager::RetrieveRMQ()
+{
+    // Stop the timer. Don't have to Err failure doing so.
+    auto r = timer.setTimer(SD_EVENT_OFF);
+    if (r < 0)
+    {
+        log<level::ERR>("Failure to STOP the timer",
+                entry("ERROR=%s", strerror(-r)));
+    }
+
+    if(this->ReceiveMessageQueue.empty())
+    {
+		std::vector<uint8_t> empty {};
+        log<level::DEBUG>("RMQ is empty!");
+
+        return std::make_pair(0, empty);
+    }
+    // Pop the processed entry off the queue
+    auto msg = this->ReceiveMessageQueue.front();
+    this->ReceiveMessageQueue.pop();
+
+    // Start the timer for next transaction
+    auto time = std::chrono::duration_cast<std::chrono::microseconds>(
+            std::chrono::seconds(IPMI_SMS_ATN_ACK_TIMEOUT_SECS));
+
+    r = timer.startTimer(time);
+    if (r < 0)
+    {
+        log<level::ERR>("Error starting timer for control host");
+    }
+
+    return msg;
+}
+
+bool Manager::RMQ_empty()
+{
+    if(this->ReceiveMessageQueue.empty())
+        return true;
+    return false;
+}
+
 } // namespace command
 } // namespace host
 } // namepsace phosphor
diff --git a/host-cmd-manager.hpp b/host-cmd-manager.hpp
index c25706c..0cafbcb 100644
--- a/host-cmd-manager.hpp
+++ b/host-cmd-manager.hpp
@@ -57,6 +57,16 @@ class Manager
          */
         void execute(CommandHandler command);
 
+        /** @brief Extracts the next entry in the Receive Message Queue (RMQ) */
+        IpmbMsg RetrieveRMQ();
+
+        /** @brief Add new entry to  Receive Message Queue (RMQ) */
+        void AddtoRMQ(IpmbMsg msg);
+
+        /** @brief RMQ is empty or not */
+        bool RMQ_empty();
+
+
     private:
         /** @brief Check if anything in queue and alert host if so */
         void checkQueueAndAlertHost();
@@ -100,6 +110,9 @@ class Manager
         /** @brief Queue to store the requested commands */
         std::queue<CommandHandler> workQueue{};
 
+        /** @brief Queue to store the IPMB Messages */
+        std::queue<IpmbMsg> ReceiveMessageQueue{};
+
         /** @brief Timer for commands to host */
         phosphor::ipmi::Timer timer;
 
diff --git a/host-ipmid/ipmid-api.h b/host-ipmid/ipmid-api.h
index 1bec851..36f667f 100644
--- a/host-ipmid/ipmid-api.h
+++ b/host-ipmid/ipmid-api.h
@@ -113,6 +113,7 @@ enum ipmi_return_codes
     IPMI_CC_OK = 0x00,
     IPMI_DCMI_CC_NO_ACTIVE_POWER_LIMIT = 0x80,
     IPMI_WDOG_CC_NOT_INIT = 0x80,
+    IPMI_CC_DATA_NOT_AVAILABLE = 0x80,
     IPMI_CC_BUSY = 0xC0,
     IPMI_CC_INVALID = 0xC1,
     IPMI_CC_INVALID_RESERVATION_ID = 0xC5,
diff --git a/host-ipmid/ipmid-host-cmd-utils.hpp b/host-ipmid/ipmid-host-cmd-utils.hpp
index 293cc0c..f2d4fea 100644
--- a/host-ipmid/ipmid-host-cmd-utils.hpp
+++ b/host-ipmid/ipmid-host-cmd-utils.hpp
@@ -45,6 +45,14 @@ namespace command
      */
     using CommandHandler = std::tuple<IpmiCmdData, CallBack>;
 
+    /** @brief IPMB Message to be forward to Host.
+     *         This is the response for previous request sent by Host
+               via SendMessage command through system interface.
+     */
+     using ChannelNum = uint8_t;
+     using IpmbData = std::vector<uint8_t>;
+     using IpmbMsg = std::pair<ChannelNum, IpmbData>;
+
 } // namespace command
 } // namespace host
 } // namespace phosphor
diff --git a/ipmid.cpp b/ipmid.cpp
index f664488..c7d4766 100644
--- a/ipmid.cpp
+++ b/ipmid.cpp
@@ -20,6 +20,7 @@
 #include <ipmiwhitelist.hpp>
 #include <sdbusplus/bus.hpp>
 #include <sdbusplus/bus/match.hpp>
+#include <sdbusplus/vtable.hpp>
 #include <xyz/openbmc_project/Control/Security/RestrictionMode/server.hpp>
 #include "sensorhandler.h"
 #include "ipmid.hpp"
@@ -28,6 +29,7 @@
 #include <host-ipmid/ipmid-host-cmd.hpp>
 #include <timer.hpp>
 #include "host-ipmid/oemrouter.hpp"
+#include "systemintfcmds.h"
 
 using namespace phosphor::logging;
 namespace sdbusRule = sdbusplus::bus::match::rules;
@@ -64,6 +66,8 @@ void print_usage(void) {
 }
 
 const char * DBUS_INTF = "org.openbmc.HostIpmi";
+const char *HOST_IPMI_OBJ = "/org/openbmc/HostIpmi";
+const char *IPMB_INTF = "org.openbmc.Ipmb";
 
 const char * FILTER = "type='signal',interface='org.openbmc.HostIpmi',member='ReceivedMessage'";
 
@@ -561,6 +565,60 @@ sdbusPtr& ipmid_get_sdbus_plus_handler() {
      return sdbusp;
 }
 
+static int ipmi_return_response(sd_bus_message *bus_msg, void *userdata,
+                           sd_bus_error *ret_error)
+{
+#define ipmbMaxDataSize    256
+#define ipmbMinDataSize    7
+    int64_t status = 0;
+	uint8_t rqLun = 0;
+    std::vector<uint8_t> dataReceived;
+
+    dataReceived.reserve(ipmbMaxDataSize);
+    auto mesg = sdbusplus::message::message(bus_msg);
+
+    do
+    {
+        mesg.read(dataReceived);
+
+        if (dataReceived.size() > ipmbMaxDataSize)
+        {
+            status = -1;
+            break;
+        }
+
+    } while (0);
+    if (dataReceived.size() < ipmbMinDataSize) {
+        fprintf(stderr, "invalid ipmb message\n");
+        status = -1;
+    }
+    rqLun = dataReceived.at(1) & 0x3;
+    // for SMS, store it to RMQ
+    if (rqLun == 0x2) {
+        dataReceived.erase(dataReceived.begin()); //strip off leading slave address
+        ipmid_get_host_cmd_manager()->AddtoRMQ(std::make_pair(CHANNEL_IPMB, dataReceived));
+    }
+
+    sdbusplus::message::message reply = mesg.new_method_return();
+    reply.append(status);
+    reply.method_return();
+
+    return 0;
+}
+
+static const sdbusplus::vtable::vtable_t ipmbVtable[] = {
+    sdbusplus::vtable::start(),
+    sdbusplus::vtable::method("returnRawResponse", "ay", "x", ipmi_return_response),
+    sdbusplus::vtable::signal("sendRequest", "yyyyay"),
+    sdbusplus::vtable::end()};
+
+namespace {
+// Static storage to keep the object alive during process life
+std::unique_ptr<sdbusplus::server::interface::interface> intf
+                __attribute__((init_priority(101)));
+
+}
+
 int main(int argc, char *argv[])
 {
     int r;
@@ -623,6 +681,10 @@ int main(int argc, char *argv[])
     // Register all the handlers that provider implementation to IPMI commands.
     ipmi_register_callback_handlers(HOST_IPMI_LIB_PATH);
 
+    /* register a dbus object for IPMB interface */
+    intf = std::make_unique<sdbusplus::server::interface::interface>(
+                        *sdbusp, HOST_IPMI_OBJ, IPMB_INTF, ipmbVtable, nullptr);
+
 	// Watch for BT messages
     r = sd_bus_add_match(bus, &ipmid_slot, FILTER, handle_ipmi_command, NULL);
     if (r < 0) {
diff --git a/systemintfcmds.cpp b/systemintfcmds.cpp
index d363233..4103eaa 100644
--- a/systemintfcmds.cpp
+++ b/systemintfcmds.cpp
@@ -1,16 +1,26 @@
+#include <numeric>
+#include <phosphor-logging/log.hpp>
+#include <phosphor-logging/elog-errors.hpp>
 #include "systemintfcmds.h"
 #include "host-ipmid/ipmid-api.h"
 #include "host-ipmid/ipmid-host-cmd.hpp"
 #include "config.h"
 #include "host-cmd-manager.hpp"
 #include "host-interface.hpp"
+#include "transporthandler.hpp"
 
 #include <stdio.h>
 #include <mapper.h>
 
+const char *HOST_IPMI_OBJ = "/org/openbmc/HostIpmi";
+const char *IPMB_INTF = "org.openbmc.Ipmb";
+
 void register_netfn_app_functions() __attribute__((constructor));
 
+using namespace phosphor::logging;
 using namespace sdbusplus::xyz::openbmc_project::Control::server;
+using InternalFailure =
+    sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;
 
 // For accessing Host command manager
 using cmdManagerPtr = std::unique_ptr<phosphor::host::command::Manager>;
@@ -73,6 +83,9 @@ ipmi_ret_t ipmi_app_get_msg_flags(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
     // TODO. For now. assume its not disabled and send "0x2" anyway:
 
     uint8_t set_event_msg_buffer_full = 0x2;
+    if (ipmid_get_host_cmd_manager()->RMQ_empty() == false)
+        set_event_msg_buffer_full |= 0x1;
+
     *data_len = sizeof(set_event_msg_buffer_full);
 
     // Pack the actual response
@@ -96,6 +109,96 @@ ipmi_ret_t ipmi_app_set_bmc_global_enables(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
     return rc;
 }
 
+ipmi_ret_t ipmi_app_send_message(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
+                             ipmi_request_t request, ipmi_response_t response,
+                             ipmi_data_len_t data_len, ipmi_context_t context)
+
+{
+    uint8_t *p = (uint8_t*) request;
+    int channel = (*p) & CHANNEL_MASK;
+    uint16_t req_len = *data_len;
+    uint8_t ipmb_netfn, lun, ipmb_cmd, seq;
+    IPMB_HEADER *ipmbBuffer = (IPMB_HEADER *)(p + 1);
+    // Status code.
+    ipmi_ret_t rc = IPMI_CC_OK;
+    if (req_len < IPMB_MIN_SIZE + 1) {
+        log<level::ERR>("IPMI Send Message: Invalid Data");
+	    rc = IPMI_CC_INVALID;
+        return rc;
+    }
+	#if 0
+    fprintf(stderr, "IPMB header: rsSA 0x%x rsNetFnLUN 0x%x rqSA 0x%x rqSeqLUN 0x%x cmd 0x%x\n",
+        ipmbBuffer->Header.Req.address,
+        ipmbBuffer->Header.Req.rsNetFnLUN,
+        ipmbBuffer->Header.Req.rqSA,
+        ipmbBuffer->Header.Req.rqSeqLUN,
+        ipmbBuffer->Header.Req.cmd);
+	#endif
+    *data_len = 0;
+
+    if (channel != CHANNEL_IPMB) {
+	    rc = IPMI_CC_INVALID;
+        log<level::ERR>("IPMI Send Message: unsupported channel");
+        return rc;
+    }
+
+    // check checksum1
+    std::vector<uint8_t> data1(p+1, p+4);
+    uint8_t checksumVal = std::accumulate(data1.begin(), data1.end(), 0);
+    if (checksumVal != 0) {
+        log<level::ERR>("IPMI Send Message: Invalid Checksum1");
+	    rc = IPMI_CC_INVALID;
+        return rc;
+    }
+    // check checksum2
+    std::vector<uint8_t> data2(p+4, p+req_len);
+    checksumVal = std::accumulate(data2.begin(), data2.end(), 0);
+    if (checksumVal != 0) {
+        log<level::ERR>("IPMI Send Message: Invalid Checksum2");
+	    rc = IPMI_CC_INVALID;
+        return rc;
+    }
+
+    ipmb_netfn = ipmbBuffer->Header.Req.rsNetFnLUN >> 2; //netfn
+    lun = 0x2;  //rqLun = SMS lun (10b)
+    seq = ipmbBuffer->Header.Req.rqSeqLUN >> 2;  //rqSeq
+    ipmb_cmd = ipmbBuffer->Header.Req.cmd;
+    std::vector<uint8_t> ipmbdata(p+8, p+req_len);
+
+    sdbusplus::bus::bus bus(ipmid_get_sd_bus_connection());
+    sdbusplus::message::message mesg =
+        bus.new_signal(HOST_IPMI_OBJ, IPMB_INTF, "sendRequest");
+    mesg.append(seq, ipmb_netfn, lun, ipmb_cmd, ipmbdata);
+    mesg.signal_send();
+
+    return rc;
+}
+
+ipmi_ret_t ipmi_app_get_message(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
+                             ipmi_request_t request, ipmi_response_t response,
+                             ipmi_data_len_t data_len, ipmi_context_t context)
+
+{
+    ipmi_ret_t rc = IPMI_CC_OK;
+    uint8_t channel_num;
+
+    auto msg = ipmid_get_host_cmd_manager()->RetrieveRMQ();
+    channel_num = msg.first;
+    std::vector<uint8_t> msg_data = msg.second;
+
+    if (msg_data.size() == 0) {
+        rc = IPMI_CC_DATA_NOT_AVAILABLE;
+        *data_len = 0;
+    } else {
+        memcpy(response, &channel_num, 1);
+        memcpy(static_cast<uint8_t*>(response) + 1, msg_data.data(),
+            msg_data.size());
+        *data_len = msg_data.size() + 1;
+    }
+
+    return rc;
+}
+
 namespace {
 // Static storage to keep the object alive during process life
 std::unique_ptr<phosphor::host::command::Host> host
@@ -120,6 +223,13 @@ void register_netfn_app_functions()
     ipmi_register_callback(NETFUN_APP, IPMI_CMD_GET_MSG_FLAGS, NULL, ipmi_app_get_msg_flags,
                            SYSTEM_INTERFACE);
 
+    // <Send Message Command>
+    ipmi_register_callback(NETFUN_APP, IPMI_CMD_SEND_MESSAGE, NULL, ipmi_app_send_message,
+                           PRIVILEGE_USER);
+    // <Get Message Command>
+    ipmi_register_callback(NETFUN_APP, IPMI_CMD_GET_MESSAGE, NULL, ipmi_app_get_message,
+                           PRIVILEGE_USER);
+
     // Create new xyz.openbmc_project.host object on the bus
     auto objPath = std::string{CONTROL_HOST_OBJ_MGR} + '/' + HOST_NAME + '0';
 
diff --git a/systemintfcmds.h b/systemintfcmds.h
index d603aaa..262d8f9 100644
--- a/systemintfcmds.h
+++ b/systemintfcmds.h
@@ -16,11 +16,16 @@
 // Major command for the heartbeat operation (verify host is alive)
 #define CMD_HEARTBEAT       0xFF
 
+#define CHANNEL_IPMB 2
+#define IPMB_MIN_SIZE 7
+
 // IPMI commands used via System Interface functions.
 enum ipmi_netfn_system_intf_cmds
 {
     IPMI_CMD_SET_BMC_GLOBAL_ENABLES = 0x2E,
     IPMI_CMD_GET_MSG_FLAGS          = 0x31,
+    IPMI_CMD_GET_MESSAGE            = 0x33,
+    IPMI_CMD_SEND_MESSAGE           = 0x34,
     IPMI_CMD_READ_EVENT             = 0x35,
 };
 
@@ -43,4 +48,47 @@ struct oem_sel_timestamped
     uint8_t data[4];
 };
 
+#pragma pack(1)
+typedef struct _IPMB_HEADER
+{
+    union
+    {
+        struct
+        {
+            /** @brief IPMB Connection Header Format */
+            uint8_t address;
+            uint8_t rsNetFnLUN; /// @brief responder's net function and logical
+                                /// unit number
+            uint8_t checksum1;  /// @brief checksum computed on first two bytes
+                                /// of IPMB_HEADER
+            /** @brief IPMB Header */
+            uint8_t rqSA;     /// @brief requester's slave address, LS bit=0
+            uint8_t rqSeqLUN; /// @brief requester's sequence number and logical
+                              /// unit number
+            uint8_t cmd; /// @brief command required by the network identify the
+                         /// type of rqts
+            uint8_t data[]; /// @brief payload
+        } Req;              /// @brief IPMB request header
+        struct
+        {
+            uint8_t address;
+            /** @brief IPMB Connection Header Format */
+            uint8_t rqNetFnLUN; /// @brief requester's net function and logical
+                                /// unit number
+            uint8_t checksum1;  /// @brief checksum computed on first two bytes
+                                /// of IPMB_HEADER
+            /** @brief IPMB Header */
+            uint8_t rsSA;     /// @brief responder's slave address, LS bit=0
+            uint8_t rsSeqLUN; /// @brief responder's sequence number and logical
+                              /// unit number
+            uint8_t cmd; /// @brief command required by the network identify the
+                         /// type of rqts
+            uint8_t completionCode; /// @brief IPMB nodes return a Completion
+                                    /// Code in all response msgs
+            uint8_t data[];         /// @brief payload
+        } Resp;                     /// @brief IPMB response header
+    } Header;                       /// @brief IPMB frame header
+} IPMB_HEADER;
+#pragma pack()
+
 #endif
