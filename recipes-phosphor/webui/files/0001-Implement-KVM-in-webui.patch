From c90f5ac2ecc178eca6580e0975e09a31d3a0cd21 Mon Sep 17 00:00:00 2001
From: kwliu <kwliu@nuvoton.com>
Date: Thu, 13 Sep 2018 12:37:34 +0800
Subject: [PATCH] Implement KVM in webui

This patchset is the beginings of the infrastructure to allow KVM
sessions through the webui.  It should not be considered complete, and
requires a websocket capable VNC/RFB connection on the BMC.

To access, open the url https://<hostname>/#kvm

Change-Id: I329f48d358c4255ec9fe2eb1de140a055b27abaf
---
 app/index.js                            |  5 +-
 app/kvm/controllers/kvm-controller.html |  5 ++
 app/kvm/controllers/kvm-controller.js   | 91 +++++++++++++++++++++++++
 app/kvm/index.js                        | 29 ++++++++
 app/kvm/styles/index.scss               |  1 +
 app/kvm/styles/kvm.scss                 | 11 +++
 app/styles/index.scss                   |  3 +-
 package.json                            |  3 +-
 8 files changed, 145 insertions(+), 3 deletions(-)
 create mode 100644 app/kvm/controllers/kvm-controller.html
 create mode 100644 app/kvm/controllers/kvm-controller.js
 create mode 100644 app/kvm/index.js
 create mode 100644 app/kvm/styles/index.scss
 create mode 100644 app/kvm/styles/kvm.scss

diff --git a/app/index.js b/app/index.js
index 602d601..2482558 100644
--- a/app/index.js
+++ b/app/index.js
@@ -84,6 +84,9 @@ import user_accounts_controller from './users/controllers/user-accounts-controll
 
 import phosphor_templates from './templates.js';
 
+import kvm_index from './kvm/index.js';
+import kvm_controller from './kvm/controllers/kvm-controller.js';
+
 window.angular && (function(angular) {
   'use strict';
 
@@ -100,7 +103,7 @@ window.angular && (function(angular) {
             // Model resources
             'app.login', 'app.overview', 'app.serverControl',
             'app.serverHealth', 'app.configuration', 'app.users',
-            'app.multiServer'
+            'app.multiServer', 'app.kvm'
           ])
       // Route configuration
       .config([
diff --git a/app/kvm/controllers/kvm-controller.html b/app/kvm/controllers/kvm-controller.html
new file mode 100644
index 0000000..40e4d97
--- /dev/null
+++ b/app/kvm/controllers/kvm-controller.html
@@ -0,0 +1,5 @@
+<div id="noVNC_container">
+    <div id="noVNC_status_bar">
+        <div id="noVNC_left_dummy_elem"></div>
+    </div>
+</div>
diff --git a/app/kvm/controllers/kvm-controller.js b/app/kvm/controllers/kvm-controller.js
new file mode 100644
index 0000000..08f8123
--- /dev/null
+++ b/app/kvm/controllers/kvm-controller.js
@@ -0,0 +1,91 @@
+/**
+ * Controller for kvm
+ *
+ * @module app/kvm
+ * @exports kvmController
+ * @name kvmController
+ */
+
+import RFB from '@novnc/novnc/core/rfb.js';
+import { init_logging as main_init_logging } from '@novnc/novnc/core/util/logging.js';
+
+
+window.angular && (function (angular) {
+    'use strict';
+
+    angular
+        .module('app.kvm')
+        .controller('kvmController', [
+            '$scope',
+            '$location',
+            '$window',
+            '$log',
+            function ($scope, $location, $window, $log) {
+                $scope.desktopName = "";
+                var rfb;
+
+                $scope.$on("$destroy", function () {
+                    if (rfb) {
+                        rfb.disconnect();
+                    }
+                });
+
+                function updateDesktopName(rfb, name) {
+                    $scope.desktopName = name;
+                };
+
+                function sendCtrlAltDel() {
+                    rfb.sendCtrlAltDel();
+                    return false;
+                };
+
+                function connected(e) {
+                    $log.debug("RFB Connected");
+                }
+                function disconnected(e) {
+                    $log.debug("RFB disconnected");
+                }
+
+		var host = $location.host();
+                var port = $location.port();
+                var target = angular.element(document.querySelector('#noVNC_container'))[0];
+                main_init_logging("debug");
+                try {
+                    rfb = new RFB(target,
+                        "wss://" + host + ":" + port + "/kvmws", {});
+
+                    rfb.addEventListener("connect", connected);
+                    rfb.addEventListener("disconnect", disconnected);
+                    rfb.addEventListener("desktopname", updateDesktopName);
+                } catch (exc) {
+                    $log.error(exc);
+                    updateState(null, 'fatal', null, 'Unable to create RFB client -- ' + exc);
+                    return; // don't continue trying to connect
+                };
+
+                function status(text, level) {
+                    var status_bar = angular.element(document.querySelector('#noVNC_status_bar'))[0];
+                    // Need to check if the status bar still exists.  On page change, it gets destroyed
+                    // when we swap to a different view.  The system will disconnect async
+                    if (status_bar) {
+                        status_bar.textContent = text;
+                    }
+
+                    var status = angular.element(document.querySelector('#noVNC_status'))[0];
+                    switch (level) {
+                        case 'normal':
+                        case 'warn':
+                        case 'error':
+                            break;
+                        default:
+                            level = "warn";
+                    }
+                    if (status) {
+                        status.setAttribute("class", "noVNC_status_" + level);
+                    }
+                };
+            }
+        ]
+        );
+
+})(angular);
diff --git a/app/kvm/index.js b/app/kvm/index.js
new file mode 100644
index 0000000..a94e9a7
--- /dev/null
+++ b/app/kvm/index.js
@@ -0,0 +1,29 @@
+/**
+ * A module for the kvm
+ *
+ * @module app/kvm/index
+ * @exports app/kvm/index
+ * @version 0.0.1
+ */
+
+window.angular && (function (angular) {
+    'use strict';
+
+    angular
+        .module('app.kvm', [
+            'ngRoute',
+            'app.common.services'
+        ])
+        // Route configuration
+        .config(['$routeProvider', function ($routeProvider) {
+            $routeProvider
+                .when('/kvm', {
+                    'template': require('./controllers/kvm-controller.html'),
+                    'controller': 'kvmController',
+                    authenticated: true
+                })
+        }]);
+
+})(window.angular);
+
+
diff --git a/app/kvm/styles/index.scss b/app/kvm/styles/index.scss
new file mode 100644
index 0000000..7bfbe63
--- /dev/null
+++ b/app/kvm/styles/index.scss
@@ -0,0 +1 @@
+@import "./kvm.scss";
\ No newline at end of file
diff --git a/app/kvm/styles/kvm.scss b/app/kvm/styles/kvm.scss
new file mode 100644
index 0000000..2f9e2c0
--- /dev/null
+++ b/app/kvm/styles/kvm.scss
@@ -0,0 +1,11 @@
+
+.noNVC_shown {
+  display: inline;
+}
+.noVNC_hidden {
+  display: none;
+}
+
+#noVNC_left_dummy_elem {
+  flex: 1;
+}
diff --git a/app/styles/index.scss b/app/styles/index.scss
index 64477bf..1e88bd3 100644
--- a/app/styles/index.scss
+++ b/app/styles/index.scss
@@ -7,4 +7,5 @@ $charset: "UTF-8";
 @import "../server-health/styles/index.scss";
 @import "../configuration/styles/index.scss";
 @import "../users/styles/index.scss";
-@import "../multi-server/styles/index.scss";
\ No newline at end of file
+@import "../multi-server/styles/index.scss";
+@import "../kvm/styles/index.scss";
diff --git a/package.json b/package.json
index 2163f15..21e9696 100644
--- a/package.json
+++ b/package.json
@@ -73,7 +73,8 @@
     "filter-chunk-webpack-plugin": "^2.1.0",
     "mini-css-extract-plugin": "^0.4.2",
     "svg-inline-loader": "^0.8.0",
-    "webpack-cli": "^3.1.0"
+    "webpack-cli": "^3.1.0",
+    "@novnc/novnc": "^1.0.0"
   },
   "license": "MIT",
   "engines": {
-- 
2.17.1

